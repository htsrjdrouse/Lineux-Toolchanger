[{"id":"1d6d9f5f.44aa31","type":"mqtt in","z":"a711c255.49846","name":"","topic":"topic/test","qos":"2","broker":"1dee29ae.f8c896","x":185.35713958740234,"y":175.7142858505249,"wires":[["8bf27306.eb74f"]]},{"id":"c9c1f766.4d2f38","type":"debug","z":"a711c255.49846","name":"","active":true,"console":"false","complete":"payload","x":642.2142753601074,"y":55.57141876220703,"wires":[]},{"id":"96235fa6.e567b","type":"inject","z":"a711c255.49846","name":"","topic":"test","payload":"124_321_555_test","payloadType":"str","repeat":"3","crontab":"","once":false,"x":200.35713958740234,"y":270.7142858505249,"wires":[["105b1609.c051da"]]},{"id":"105b1609.c051da","type":"mqtt out","z":"a711c255.49846","name":"","topic":"topic/test","qos":"","retain":"","broker":"1dee29ae.f8c896","x":412.35713958740234,"y":270.7142858505249,"wires":[]},{"id":"8bf27306.eb74f","type":"function","z":"a711c255.49846","name":"format data nicely","func":"msg.payload = msg.payload.toString();\nvar modmsg = msg;\nreturn modmsg;","outputs":1,"noerr":0,"x":417.1428756713867,"y":119.57142639160156,"wires":[["c2426e9.bdea89","c9c1f766.4d2f38"]]},{"id":"c2426e9.bdea89","type":"websocket out","z":"a711c255.49846","name":"","server":"9154b5c8.39dad8","client":"","x":788.1428756713867,"y":163.71428108215332,"wires":[]},{"id":"d512f25b.f883e","type":"http response","z":"a711c255.49846","name":"","x":551.8571395874023,"y":365.7142858505249,"wires":[]},{"id":"995ec4d7.e86388","type":"http in","z":"a711c255.49846","name":"","url":"/simple","method":"get","swaggerDoc":"","x":134.85713958740234,"y":373.7142858505249,"wires":[["839d1e81.a4d5e"]]},{"id":"839d1e81.a4d5e","type":"template","z":"a711c255.49846","name":"Simple Web Page","field":"payload","fieldType":"msg","format":"html","syntax":"mustache","template":"<!DOCTYPE HTML>\n<html>\n    <head>\n    <title>Encoder sensor data</title>\n    <script type=\"text/javascript\">\n        var ws;\n        var wsUri = \"ws:\";\n        var loc = window.location;\n        console.log(loc);\n        if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n        // This needs to point to the web socket in the Node-RED flow\n        // ... in this case it's ws/simple\n        wsUri += \"//\" + loc.host + loc.pathname.replace(\"simple\",\"ws/simple\");\n\n        function wsConnect() {\n            console.log(\"connect\",wsUri);\n            ws = new WebSocket(wsUri);\n            //var line = \"\";    // either uncomment this for a building list of messages\n            ws.onmessage = function(msg) {\n                var line = \"\";  // or uncomment this to overwrite the existing message\n                // parse the incoming message as a JSON object\n                var data = msg.data;\n                //var mdata = modmsg.data;\n                //console.log(data);\n                // build the output from the topic and payload parts of the object\n                line += \"<p>\"+data+\"</p>\";\n                var res = msg.data.split(\"_\");\n                var xpos = \"<p>Xpos: \"+res[0]+\"</p>\";\n                var ypos = \"<p>Ypos: \"+res[1]+\"</p>\";\n                var zpos = \"<p>Zpos: \"+res[2]+\"</p>\";\n                var epos = \"<p>Epos: \"+res[3]+\"</p>\";\n                //line2 += \"<p>\"+mdata+\"</p>\";\n                // replace the messages div with the new \"line\"\n                //document.getElementById('messages').innerHTML = line;\n                document.getElementById('xpos').innerHTML = xpos;\n                document.getElementById('ypos').innerHTML = ypos;\n                document.getElementById('zpos').innerHTML = zpos;\n                document.getElementById('epos').innerHTML = epos;\n                \n                //ws.send(JSON.stringify({data:data}));\n            }\n            ws.onopen = function() {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"connected\";\n                //ws.send(\"Open for data\");\n                console.log(\"connected\");\n            }\n            ws.onclose = function() {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"not connected\";\n                // in case of lost connection tries to reconnect every 3 secs\n                setTimeout(wsConnect,3000);\n            }\n        }\n        \n        function doit(m) {\n            if (ws) { ws.send(m); }\n        }\n    </script>\n    </head>\n    <body onload=\"wsConnect();\" onunload=\"ws.disconnect();\">\n        <font face=\"Arial\">\n        <h1>Simple Live Display</h1>\n        <div id=\"messages\"></div>\n        <br>\n        <div id=\"xpos\"></div>\n        <div id=\"ypos\"></div>\n        <div id=\"zpos\"></div>\n        <div id=\"epos\"></div>\n        <!--\n        <button type=\"button\" onclick='doit(\"click\");'>Click to send message</button>\n        <hr/>\n        <div id=\"messages2\"></div>\n        -->\n\n        <hr/>\n        <div id=\"status\">unknown</div>\n    \n        </font>\n    </body>\n</html>\n","x":342.85713958740234,"y":376.7142858505249,"wires":[["d512f25b.f883e"]]},{"id":"5569e376.4ea56c","type":"websocket in","z":"a711c255.49846","name":"","server":"2f2853c4.4033dc","client":"","x":207.85713958740234,"y":473.7142858505249,"wires":[["1f88edb7.0cc452"]]},{"id":"1f88edb7.0cc452","type":"debug","z":"a711c255.49846","name":"","active":true,"console":"false","complete":"false","x":497.85713958740234,"y":479.7142858505249,"wires":[]},{"id":"1dee29ae.f8c896","type":"mqtt-broker","z":"","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"15","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"9154b5c8.39dad8","type":"websocket-listener","z":"a711c255.49846","path":"/ws/simple","wholemsg":"false"},{"id":"2f2853c4.4033dc","type":"websocket-listener","z":"a711c255.49846","path":"/ws/simple","wholemsg":"false"}]
